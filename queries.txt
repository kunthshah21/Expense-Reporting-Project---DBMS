login(username, password):
    SELECT * FROM users 
    WHERE username = ? AND password = ?

logout():
    -

add_user(username, password, role):
    INSERT INTO users (username, password, role)
    VALUES (?, ?, ?)

list_users():
    SELECT uid, username, role FROM users

add_category(name):
    INSERT INTO categories (category_name) VALUES (?)
        
add_payment_method(method):
    INSERT INTO payment_methods (method) VALUES (?)
    
add_expense(amount, category, payment_method, date, description, tags):
        # Get category ID
        cid_result
            SELECT cid FROM categories 
            WHERE LOWER(category_name) = ?
    
        # Get payment method ID
        pid_result
            SELECT pid FROM payment_methods 
            WHERE LOWER(method) = ?
        
        # Insert expense
            INSERT INTO expenses 
            (uid, amount, cid, pid, date, description)
            VALUES (?, ?, ?, ?, ?, ?)
        
        # Handle multiple tags
        tag_result
            SELECT tid FROM tags WHERE tag_name = ?
            
        #if not tag_result:
            INSERT INTO tags (tag_name) VALUES (?)
        #tid
            SELECT last_insert_rowid()
            

        # Insert into expenses_tags table    
            INSERT INTO expenses_tags (eid, tid)
            VALUES (?, ?)

update_expense(expense_id, field, new_value):
    SELECT uid FROM expenses WHERE eid = ?, 
                              
    category
        SELECT cid FROM categories WHERE category_name = ?

    if invalid category:
        UPDATE expenses SET cid = ? WHERE eid = ?

    payment_method
        SELECT pid FROM payment_methods WHERE method = ?

    if invalid method:
        UPDATE expenses SET pid = ? WHERE eid = ?
        
       
    # Clear existing tags
        DELETE FROM expenses_tags WHERE eid = ?

    # Add new tags
        SELECT tid FROM tags WHERE tag_name = ?

    if not tid:
        INSERT INTO tags (tag_name) VALUES (?)
        else 

        INSERT INTO expenses_tags (eid, tid) VALUES (?, ?)
        UPDATE expenses SET {field} = ? WHERE eid = ?
        
delete_expense(expense_id):
    
    # Verify ownership
        SELECT uid FROM expenses WHERE eid = ? 
        
    # Delete associated tags
        DELETE FROM expenses_tags WHERE eid = ?

    # Delete expense
        DELETE FROM expenses WHERE eid = ?

list_expenses(filters=None):
    SELECT e.eid, e.amount, c.category_name, p.method, e.date, e.description,
    GROUP_CONCAT(t.tag_name, ', ') AS tags
    FROM expenses e
    JOIN categories c ON e.cid = c.cid
    JOIN payment_methods p ON e.pid = p.pid
    LEFT JOIN expenses_tags et ON e.eid = et.eid
    LEFT JOIN tags t ON et.tid = t.tid
    WHERE e.uid = ?

      
        
    base_query += " GROUP BY e.eid ORDER BY e.date DESC"
        

add_tag(tag_name):
   INSERT INTO tags (tag_name) VALUES (?)

list_tags():
    SELECT * FROM tags"

delete_tag(tag_name):
    DELETE FROM tags WHERE tag_name = ?

#region Group Management
create_group(group_name, description):
    INSERT INTO groups (group_name, description, date_created) VALUES (?, ?, date('now'))

add_user_to_group(username, group_name):
    # Get user ID and group ID
        SELECT uid FROM users WHERE username = ?
        SELECT gid FROM groups WHERE group_name = ?

    # Check if the group is empty
        SELECT COUNT(*) FROM user_group WHERE gid = ?
            
    # If the group is not empty, check if current_user is in the group
        SELECT 1 FROM user_group WHERE uid = ? AND gid = ?

    # Add the user to the group
        INSERT INTO user_group (uid, gid) VALUES (?, ?)
        
delete_group(group_name):
    DELETE FROM groups WHERE group_name = ?
        
add_group_expense(amount, group_name, category, payment_method, description, tags, split_usernames):
    
    # Get group ID, category ID, and payment method ID
        SELECT gid FROM groups WHERE group_name = ?
        SELECT cid FROM categories WHERE category_name = ?
        SELECT pid FROM payment_methods WHERE method = ?

        
    # Add expense to group_expenses table
        INSERT INTO group_expenses (gid, d_uid, amount, cid, pid, date, description) VALUES (?, ?, ?, ?, ?, date('now'), ?)

    # Add tags to the expense
        SELECT tid FROM tags WHERE tag_name = ?
        INSERT INTO tags (tag_name) VALUES (?)
        else
        INSERT INTO group_expense_tags (geid, tid) VALUES (?, ?)

    # Fetch UIDs for all users
        SELECT uid FROM users WHERE username = ?

    # Insert split details into split_users table
        INSERT INTO split_users (geid, uid, split_amount) VALUES (?, ?, ?)

#region User Management Updates
update_user(username, field, new_value):
    UPDATE users SET {field} = ? WHERE username = ?

delete_user(username):
    DELETE FROM users WHERE username = ?

# region Import/Export
import_expenses(file_path):
    # Check category exists
    SELECT cid FROM categories 
    WHERE category_name = ?
        
    # Check payment method exists
        SELECT pid FROM payment_methods 
        WHERE method = ?
                    
def export_csv(file_path, sort_field): 
    SELECT e.eid, e.amount, c.category_name, p.method, e.date, e.description,
    GROUP_CONCAT(t.tag_name, ', ') AS tags
    FROM expenses e
    JOIN categories c ON e.cid = c.cid
    JOIN payment_methods p ON e.pid = p.pid
    LEFT JOIN expenses_tags et ON e.eid = et.eid
    LEFT JOIN tags t ON et.tid = t.tid
    WHERE e.uid = ?
    GROUP BY e.eid

list_categories():
    SELECT category_name FROM categories

list_payment_methods():
    SELECT method FROM payment_methods
        
# region Reports
report_top_expenses(n, start_date, end_date):
    SELECT e.eid, e.amount, c.category_name, p.method, e.date, e.description,
    GROUP_CONCAT(t.tag_name, ', ') AS tags
    FROM expenses e
    JOIN categories c ON e.cid = c.cid
    JOIN payment_methods p ON e.pid = p.pid
    LEFT JOIN expenses_tags et ON e.eid = et.eid
    LEFT JOIN tags t ON et.tid = t.tid
    WHERE e.uid = ? 
    AND e.date BETWEEN ? AND ?
    GROUP BY e.eid
    ORDER BY e.amount DESC
    LIMIT ?
        
report_category_spending(category):
    SELECT SUM(e.amount) AS total, c.category_name
    FROM expenses e
    JOIN categories c ON e.cid = c.cid
    WHERE e.uid = ? AND LOWER(c.category_name) = ?
        

report_above_average_expenses():
    SELECT e.*, c.category_name, p.method, 
        (SELECT AVG(amount) 
            FROM expenses e2 
            WHERE e2.cid = e.cid) AS category_avg
            FROM expenses e
            JOIN categories c ON e.cid = c.cid
            JOIN payment_methods p ON e.pid = p.pid
            WHERE e.uid = ? 
            AND e.amount > category_avg
            ORDER BY c.category_name, e.amount DESC
        
        
report_monthly_category_spending():
    SELECT 
        strftime('%Y-%m', e.date) AS month,
        c.category_name,
    SUM(e.amount) AS total,
    COUNT(e.eid) AS count
     FROM expenses e
    JOIN categories c ON e.cid = c.cid
    WHERE e.uid = ?
    GROUP BY month, c.category_name
    ORDER BY month DESC, total DESC
        
report_highest_spender_per_month():
    WITH monthly_spending AS (
        SELECT
            strftime('%Y-%m', e.date) AS month,
            u.username,
        SUM(e.amount) AS total,
        RANK() OVER (PARTITION BY strftime('%Y-%m', e.date) 
        ORDER BY SUM(e.amount) DESC) AS rank
        FROM expenses e
        JOIN users u ON e.uid = u.uid
        GROUP BY month, u.username
        )
    SELECT month, username, total
    ROM monthly_spending
    WHERE rank = 1
    ORDER BY month DESC
        
report_frequent_category():
    SELECT c.category_name, COUNT(*) AS count
    FROM expenses e
    JOIN categories c ON e.cid = c.cid
    WHERE e.uid = ?
    GROUP BY c.category_name
    ORDER BY count DESC
    LIMIT 1
        
report_payment_method_usage():
    SELECT p.method, SUM(e.amount) AS total_spent,
    COUNT(e.eid) AS expense_count
    FROM expenses e
    JOIN payment_methods p ON e.pid = p.pid
    WHERE e.uid = ?
    GROUP BY p.method
    ORDER BY total_spent DESC
        
report_tag_expenses():
    SELECT t.tag_name, COUNT(et.eid) AS expense_count
    FROM tags t
    LEFT JOIN expenses_tags et ON t.tid = et.tid
    WHERE EXISTS (
        SELECT 1 FROM expenses e
        WHERE e.eid = et.eid AND e.uid = ?
    )
    GROUP BY t.tag_name
    ORDER BY expense_count DESC

    